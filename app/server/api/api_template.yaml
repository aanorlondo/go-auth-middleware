openapi: 3.0.3
info:
  title: Go Auth Server
  version: 1.0.0
  description: Golang Centralized Authentication (MySQL) & Authorization (JWT+Redis) LAN server
servers:
  - url: "https://${HOSTNAME}/go-auth"

components:
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    APIKeyAuth:
      type: http
      scheme: bearer
      bearerFormat: API_KEY

tags:
  - name: Authentication
    description: authentication related routes
  - name: Authorization
    description: RBAC related routes
  - name: Users
    description: user informations

paths:
  # LOGIN
  /login:
    post:
      tags:
        - Authentication
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string

  # SIGN UP
  /signup:
    post:
      tags:
        - Authentication
      summary: User signup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: Successful signup
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string

  # GET USER
  /user:
    get:
      tags:
        - Users
      summary: Get user information
      security:
        - JWTAuth: []
      responses:
        "200":
          description: Successful user retrieval
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string

  # UPDATE USER
  /user/update:
    put:
      tags:
        - Users
      summary: Update user password
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
      responses:
        "200":
          description: Successful password update

  # CHECK USER PRIVILEGES
  /user/check:
    get:
      tags:
        - Authorization
      summary: Check user privileges
      security:
        - JWTAuth: []
      responses:
        "200":
          description: Successful privilege check
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  # PROMOTE USER PRIVILEGES
  /user/promote:
    post:
      tags:
        - Authorization
      summary: Promote user privileges to 'readWrite'
      security:
        - APIKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
      responses:
        "200":
          description: Successful user promotion
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  # DEMOTE USER PRIVILEGES
  /user/demote:
    post:
      tags:
        - Authorization
      summary: Demote user privileges to 'readOnly'
      security:
        - APIKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
      responses:
        "200":
          description: Successful user demotion
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
